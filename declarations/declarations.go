//go:generate declgen -repo "https://github.com/apple/device-management.git" -commit "b838baacf2e790db729b6ca3f52724adc8bfb96d"

package declarations

import (
	"encoding/json"
	"errors"
	"fmt"
	"reflect"

	"github.com/korylprince/go-adm/declarations/activations"
	"github.com/korylprince/go-adm/declarations/assets"
	"github.com/korylprince/go-adm/declarations/configurations"
	"github.com/korylprince/go-adm/declarations/management"
	"github.com/korylprince/go-adm/jsonutil"
)

var ErrUnknownDeclarationType = errors.New("unknown declaration type")

func mergeMap[K comparable, V any](maps ...map[K]V) map[K]V {
	merged := make(map[K]V)
	for _, m := range maps {
		for k, v := range m {
			merged[k] = v
		}
	}
	return merged
}

// DeclarationMap is a mapping of Declaration Type to the Go type
var DeclarationMap = mergeMap(
	activations.DeclarationMap,
	assets.DeclarationMap,
	configurations.DeclarationMap,
	management.DeclarationMap,
)

type DeclarationPayload interface {
	DeclarationType() string
}

type Declaration struct {
	// A string uniquely identifying this declaration.
	Identifier string `json:"Identifier" required:"true"`

	// A unique token generated by the server specifying a particular revision
	ServerToken string `json:"ServerToken,omitempty"`

	// The payload describing this declaration.
	Payload DeclarationPayload `json:"Payload" required:"true"`
}

func (d *Declaration) Type() string {
	if d.Payload == nil {
		return ""
	}
	return d.Payload.DeclarationType()
}

func (d *Declaration) MarshalJSON() ([]byte, error) {
	// fill struct defaults
	typ := reflect.TypeOf(d.Payload)
	if d.Payload != nil && (typ.Kind() == reflect.Struct || (typ.Kind() == reflect.Pointer && typ.Elem().Kind() == reflect.Struct)) {
		if err := jsonutil.SetDefaults(d.Payload); err != nil {
			return nil, fmt.Errorf("could not set struct defaults: %w", err)
		}
	}

	decl := map[string]any{
		"Type":       d.Type(),
		"Identifier": d.Identifier,
		"Payload":    d.Payload,
	}
	if d.ServerToken != "" {
		decl["ServerToken"] = d.ServerToken
	}

	return json.Marshal(decl)
}

func NewFromType(typ, id, token string) (*Declaration, error) {
	payload, ok := DeclarationMap[typ]
	if !ok {
		return nil, ErrUnknownDeclarationType
	}

	var pay DeclarationPayload
	ptyp := reflect.TypeOf(payload)
	if ptyp.Kind() == reflect.Struct {
		pay = reflect.New(reflect.TypeOf(payload)).Interface().(DeclarationPayload)
	} else if ptyp.Kind() == reflect.Map {
		pay = reflect.MakeMap(reflect.TypeOf(payload)).Interface().(DeclarationPayload)
	}

	return &Declaration{
		Identifier:  id,
		ServerToken: token,
		Payload:     pay,
	}, nil
}
