//go:generate declgen -repo "https://github.com/apple/device-management.git" -commit "b838baacf2e790db729b6ca3f52724adc8bfb96d"

package declarations

import (
	"encoding/json"

	"github.com/korylprince/go-adm/declarations/activations"
	"github.com/korylprince/go-adm/declarations/assets"
	"github.com/korylprince/go-adm/declarations/configurations"
	"github.com/korylprince/go-adm/declarations/management"
)

func mergeMap[K comparable, V any](maps ...map[K]V) map[K]V {
	merged := make(map[K]V)
	for _, m := range maps {
		for k, v := range m {
			merged[k] = v
		}
	}
	return merged
}

// DeclarationMap is a mapping of Declaration Type to the Go type
var DeclarationMap = mergeMap(
	activations.DeclarationMap,
	assets.DeclarationMap,
	configurations.DeclarationMap,
	management.DeclarationMap,
)

type DeclarationPayload interface {
	DeclarationType() string
}

type Declaration struct {
	// A string uniquely identifying this declaration.
	Identifier string `json:"Identifier"`

	// A unique token generated by the server specifying a particular revision
	ServerToken string `json:"ServerToken"`

	// The payload describing this declaration.
	Payload DeclarationPayload `json:"Payload"`
}

func (d *Declaration) Type() string {
	if d.Payload == nil {
		return ""
	}
	return d.Payload.DeclarationType()
}

func (d *Declaration) MarshalJSON() ([]byte, error) {
	StructDefaults(d.Payload)

	decl := map[string]any{
		"Type":        d.Type(),
		"Identifier":  d.Identifier,
		"ServerToken": d.ServerToken,
		"Payload":     d.Payload,
	}

	return json.Marshal(decl)
}
