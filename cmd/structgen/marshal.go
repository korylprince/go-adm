package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/korylprince/go-adm/replace"
	"github.com/korylprince/go-adm/schema"
)

type EncodeOption func(*Encoder)

func WithReplacements(reps replace.Replacements) EncodeOption {
	return func(e *Encoder) {
		e.reps = reps
	}
}

func WithSchemaEncoderOption(opt schema.EncodeOption) EncodeOption {
	return func(e *Encoder) {
		e.sOpts = append(e.sOpts, opt)
	}
}

type Encoder struct {
	f     *jen.File
	reps  replace.Replacements
	enc   *schema.Encoder
	sOpts []schema.EncodeOption
}

func NewEncoder(f *jen.File, opts ...EncodeOption) *Encoder {
	e := &Encoder{f: f, sOpts: []schema.EncodeOption{}}
	for _, opt := range opts {
		opt(e)
	}
	e.sOpts = append(e.sOpts, schema.WithReplacements(e.reps))
	e.enc = schema.NewEncoder(f, e.sOpts...)
	return e
}

func (e *Encoder) Encode(file *schema.File) {
	e.enc.RegisterFile(file)

	for _, typ := range file.Types {
		switch t := typ.(type) {
		case *schema.Enum:
			e.enc.EncodeEnum(t)
		case *schema.Struct:
			e.enc.EncodeStruct(t)
		}
	}
}

func GenerateFromFiles(fileNames []string, pkg string, reps replace.Replacements, tags []string, out io.Writer) error {
	var schemas []*schema.Schema
	var baseFileNames []string
	for _, fileName := range fileNames {
		buf, err := os.ReadFile(fileName)
		if err != nil {
			return fmt.Errorf("could not read %s: %w", fileName, err)
		}
		s, err := schema.New(buf)
		if err != nil {
			return fmt.Errorf("could not parse %s: %w", fileName, err)
		}
		schemas = append(schemas, s)
		baseFileNames = append(baseFileNames, filepath.Base(fileName))
	}

	f := jen.NewFile(pkg)

	f.HeaderComment(`Code generated by "` + filepath.Base(os.Args[0]) + `"; DO NOT EDIT.`)
	srcStr := "Source"
	if len(fileNames) > 1 {
		srcStr += "s"
	}
	f.HeaderComment(srcStr + ": " + strings.Join(baseFileNames, ", "))

	file := schema.NewFile(schemas)
	NewEncoder(f, WithSchemaEncoderOption(schema.WithTags(tags))).Encode(file)
	if err := f.Render(out); err != nil {
		return fmt.Errorf("could not render code: %w", err)
	}

	return nil
}
